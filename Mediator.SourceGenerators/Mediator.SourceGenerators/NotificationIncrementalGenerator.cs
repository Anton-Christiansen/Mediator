using System.Collections.Immutable;
using System.Linq;
using Mediator.SourceGenerators.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Mediator.SourceGenerators;

[Generator]
public class NotificationIncrementalGenerator : IIncrementalGenerator
{
    private record Notification(string Namespace, string FullyQualifiedClassName, string RequestName)
    {
        public string Namespace { get; } = Namespace;
        public string FullyQualifiedClassName { get; } = FullyQualifiedClassName;
        public string RequestName { get; } = RequestName;
    }

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.CreateSyntaxProvider(
                static (node, _) => node is ClassDeclarationSyntax,
                static (ctx, _) => Transform(ctx))
            .Where(x => x.Found)
            .Select((x, _) => x.Notification!);
        
        context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()),
            (ctx, t) => GenerateCode(ctx, t.Left, t.Right));
    }


    private static (Notification? Notification, bool Found) Transform(
        GeneratorSyntaxContext context)
    {
        var declaration = (ClassDeclarationSyntax)context.Node;
        var symbol = (INamedTypeSymbol)context.SemanticModel.GetDeclaredSymbol(declaration)!;

        var result = GetNotificationFromSymbol(symbol, out var notification);
        return (notification, result);
    }


    private static bool GetNotificationFromSymbol(INamedTypeSymbol symbol, out Notification? notification)
    {
        notification = null;
        if (symbol.IsGenericType) return false;

        foreach (var @interface in symbol.AllInterfaces)
        {
            var fullyQualifiedInterfaceName = @interface.ToString();
            if (fullyQualifiedInterfaceName.StartsWith("Mediator.Interfaces.INotificationHandler") is false) continue;
            string interfaceName = fullyQualifiedInterfaceName;
            int start = interfaceName.IndexOf('<');
            int end = interfaceName.LastIndexOf('>');
            interfaceName = interfaceName.Substring(start + 1, end - start - 1);

            notification = new Notification(symbol.ContainingNamespace.ToString(), symbol.ToString(), interfaceName);
            return true;
        }

        return false;
    }

    private static void GenerateCode(SourceProductionContext context, Compilation compilation,
        ImmutableArray<Notification> notifications)
    {
        foreach (var assembly in compilation.SourceModule.ReferencedAssemblySymbols)
        {
            foreach (var type in TypeHelper.GetAllTypes(assembly.GlobalNamespace))
            {
                if (type.TypeKind != TypeKind.Class) continue;

                if (GetNotificationFromSymbol(type, out var notification) is false) continue;

                notifications = notifications.Add(notification!);
            }
        }
        
        var namespaces = notifications.Select(x => x.Namespace).Distinct().ToArray();

        notifications = notifications.Distinct().ToImmutableArray();
        
        context.AddSource($"MediatorNotificationDependencyInjection.g.cs",
            $$"""
              // <auto-generated/>

              using System;
              using Mediator.Interfaces;
              using Mediator.Helpers;
              using Microsoft.Extensions.DependencyInjection;
              using Microsoft.Extensions.DependencyInjection.Extensions;
              {{string.Join("\n", namespaces.Select(@namespace => $"using {@namespace};"))}}

              namespace Mediator.DependencyInjection;

              internal static class NotificationDependencyInjectionRegistrationExtensions
              {
                internal static MediatorBuilder AddNotifications(this MediatorBuilder builder)
                {
                    {{string.Join("\n\n\t\t", notifications.Select(notification => $"builder.Services.AddTransient<INotificationHandler<{notification.RequestName}>, {notification.FullyQualifiedClassName}>();"))}}
                    
                    return builder;
                }
              }

              """);
    }
}