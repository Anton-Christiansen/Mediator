using System.Linq;
using Mediator.Interfaces;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;


namespace Mediator.SourceGenerators.Tests;

public class NotificationGeneratorTest
{

    [Fact]
    public void Behaviours()
    {
        const string input = """
                             namespace Test
                             {
                                public interface ICommandHandler<in TRequest> : Mediator.Interfaces.IRequestHandler<TRequest>;
                                public interface ICommandHandler<in TRequest, TResponse> : Mediator.Interfaces.IRequestHandler<TRequest, TResponse>;
                             }
                             
                             namespace Testing
                             {
                                 public class LoggingBehaviour<TRequest, TResponse> : Mediator.Interfaces.IPipelineBehaviour<Mediator.Interfaces.IRequestHandler<TRequest, TResponse>, TRequest, TResponse>
                                 {
                                     public async Task<TResponse> ExecuteAsync(TRequest request, Func<TRequest, Task<TResponse>> next, CancellationToken cancellationToken)
                                     {
                                         throw new NotImplementedException();
                                     }
                                 }
                             }
                             
                             
                             namespace RandomSpace
                             {
                                 public static class Add
                                 {
                                     public record Input();
                                     public record Output();
                                 
                                     public class Handler : Test.ICommandHandler<Input, Output>
                                     {
                                         public async Task<Output> HandleAsync(Input request, CancellationToken cancellationToken = new CancellationToken())
                                         {
                                             throw new NotImplementedException();
                                         }
                                     }
                                 }
                             }
                             
                             namespace RandomSpaceTwo
                             {
                                 public static class Delete
                                 {
                                     public record InputTwo();
                                     public record OutputTwo();
                                     public class Handler : Test.ICommandHandler<InputTwo, OutputTwo>
                                     {
                                         public async<OutputTwo> TaskHandleAsync(InputTwo request, CancellationToken cancellationToken = new CancellationToken())
                                         {
                                             throw new NotImplementedException();
                                         }
                                     }
                                 }
                             }
                             
                             """;
        const string expectedOutput = """
                                      // <auto-generated/>
                                      
                                      using System;
                                      using Mediator.Interfaces;
                                      using Mediator.Helpers;
                                      using Microsoft.Extensions.DependencyInjection;
                                      using Microsoft.Extensions.DependencyInjection.Extensions;
                                      using Testing;
                                      
                                      namespace Mediator.DependencyInjection;
                                      
                                      internal static class BehaviourDependencyInjectionRegistrationExtensions
                                      {
                                        internal static MediatorBuilder AddPipelines(this MediatorBuilder builder)
                                        {
                                            builder.Services.AddTransient<IPipelineBehaviour<Mediator.Interfaces.IRequestHandler<RandomSpace.Add.Input, RandomSpace.Add.Output>, RandomSpace.Add.Input, RandomSpace.Add.Output>, LoggingBehaviour<RandomSpace.Add.Input, RandomSpace.Add.Output>>();
                                      
                                      		builder.Services.AddTransient<IPipelineBehaviour<Mediator.Interfaces.IRequestHandler<RandomSpaceTwo.Delete.InputTwo, RandomSpaceTwo.Delete.OutputTwo>, RandomSpaceTwo.Delete.InputTwo, RandomSpaceTwo.Delete.OutputTwo>, LoggingBehaviour<RandomSpaceTwo.Delete.InputTwo, RandomSpaceTwo.Delete.OutputTwo>>();
                                            
                                            return builder;
                                        }
                                      }
                                      """;
        
        
        // Act
        // Create an instance of the source generator.
        var generator = new BehaviourIncrementalGenerator();
        
        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(BehaviourIncrementalGenerator),
            [CSharpSyntaxTree.ParseText(input)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(IPipelineBehaviour<,>).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedDependencyInjectionFileSyntax = runResult.GeneratedTrees.First(t => t.FilePath.EndsWith("MediatorBehaviourDependencyInjectionExtensions.g.cs"));
        
        // Assert
        var dependencyInjectionText = generatedDependencyInjectionFileSyntax.GetText().ToString();

        Assert.Equal(expectedOutput, dependencyInjectionText);
    }
    
    [Fact]
    public void Notifications()
    {
        // Assign
        const string expectedDependencyInjectionOutput = """
                                                         // <auto-generated/>
                                                         
                                                         using System;
                                                         using Mediator.Interfaces;
                                                         using Mediator.Helpers;
                                                         using Microsoft.Extensions.DependencyInjection;
                                                         using Microsoft.Extensions.DependencyInjection.Extensions;
                                                         using Application.Jobs;
                                                         
                                                         namespace Mediator.DependencyInjection;
                                                         
                                                         internal static class NotificationDependencyInjectionRegistrationExtensions
                                                         {
                                                           internal static MediatorBuilder AddNotifications(this MediatorBuilder builder)
                                                           {
                                                               return builder.Services.AddTransient<INotificationHandler<Application.Jobs.JobCreated.Notification>, Application.Jobs.JobCreated.HandlerOne>()
                                                         			.AddTransient<INotificationHandler<Application.Jobs.JobCreated.Notification>, Application.Jobs.JobCreated.HandlerTwo>()
                                                         			.AddTransient<INotificationHandler<Application.Jobs.JobCreated.Notification>, Application.Jobs.JobCreated.HandlerThree>();
                                                           }
                                                         }
                                                         
                                                         """;
        
        
        const string input = """
                      using Mediator.Interfaces;
                      
                      namespace Application.Jobs;
                      
                      public static class JobCreated
                      {
                          public record Notification();
                      
                          
                          public class HandlerOne : INotificationHandler<Notification>
                          {
                              public Task HandleAsync(Notification notification, CancellationToken cancellationToken = new CancellationToken())
                              {
                                  throw new NotImplementedException();
                              }
                          }
                          
                          public class HandlerTwo : INotificationHandler<Notification>
                          {
                              public Task HandleAsync(Notification notification, CancellationToken cancellationToken = new CancellationToken())
                              {
                                  throw new NotImplementedException();
                              }
                          }
                          
                          public class HandlerThree : INotificationHandler<Notification>
                          {
                              public Task HandleAsync(Notification notification, CancellationToken cancellationToken = new CancellationToken())
                              {
                                  throw new NotImplementedException();
                              }
                          }
                      }
                      """;
        
        // Act
        // Create an instance of the source generator.
        var generator = new NotificationIncrementalGenerator();
        
        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(NotificationIncrementalGenerator),
            [CSharpSyntaxTree.ParseText(input)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(IRequestHandler<>).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedDependencyInjectionFileSyntax = runResult.GeneratedTrees.First(t => t.FilePath.EndsWith("MediatorNotificationDependencyInjection.g.cs"));
        
        // Assert
        var dependencyInjectionText = generatedDependencyInjectionFileSyntax.GetText().ToString();
        
        Assert.Equal(expectedDependencyInjectionOutput, dependencyInjectionText);
    }
}