using System.Linq;
using Mediator.Interfaces;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace Mediator.SourceGenerators.Tests;

public class NotificationGeneratorTest
{
    [Fact]
    public void Notifications()
    {
        // Assign
        
        const string expectedDependencyInjectionOutput = """
                                                         // <auto-generated/>
                                                         
                                                         using System;
                                                         using Mediator.Interfaces;
                                                         using Mediator.Helpers;
                                                         using Microsoft.Extensions.DependencyInjection;
                                                         using Microsoft.Extensions.DependencyInjection.Extensions;
                                                         using Application.Jobs;
                                                         
                                                         namespace Mediator.DependencyInjection;
                                                         
                                                         public static class DependencyInjectionRegistrationExtensions
                                                         {
                                                             public static NotificationBuilder WireNotificationsFromNotificationIncrementalSourceGenerator(this NotificationBuilder builder)
                                                             {
                                                         		builder.Services.AddTransient<INotificationHandler<Application.Jobs.JobCreated.Notification>, Application.Jobs.JobCreated.HandlerOne>();
                                                         		builder.Services.AddTransient<INotificationHandler<Application.Jobs.JobCreated.Notification>, Application.Jobs.JobCreated.HandlerTwo>();
                                                         		builder.Services.AddTransient<INotificationHandler<Application.Jobs.JobCreated.Notification>, Application.Jobs.JobCreated.HandlerThree>();
                                                            return builder;
                                                            }
                                                         }
                                                         
                                                         """;
        
        
        const string input = """
                      using Mediator.Interfaces;
                      
                      namespace Application.Jobs;
                      
                      public static class JobCreated
                      {
                          public record Notification();
                      
                          
                          public class HandlerOne : INotificationHandler<Notification>
                          {
                              public Task HandleAsync(Notification notification, CancellationToken cancellationToken = new CancellationToken())
                              {
                                  throw new NotImplementedException();
                              }
                          }
                          
                          public class HandlerTwo : INotificationHandler<Notification>
                          {
                              public Task HandleAsync(Notification notification, CancellationToken cancellationToken = new CancellationToken())
                              {
                                  throw new NotImplementedException();
                              }
                          }
                          
                          public class HandlerThree : INotificationHandler<Notification>
                          {
                              public Task HandleAsync(Notification notification, CancellationToken cancellationToken = new CancellationToken())
                              {
                                  throw new NotImplementedException();
                              }
                          }
                      }
                      """;
        
        // Act
        // Create an instance of the source generator.
        var generator = new NotificationIncrementalSourceGenerator();
        
        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(NotificationIncrementalSourceGenerator),
            [CSharpSyntaxTree.ParseText(input)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(IRequestHandler<>).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedDependencyInjectionFileSyntax = runResult.GeneratedTrees.First(t => t.FilePath.EndsWith("MediatorNotificationDependencyInjection.g.cs"));
        
        // Assert
        var dependencyInjectionText = generatedDependencyInjectionFileSyntax.GetText().ToString();
        
        Assert.Equal(expectedDependencyInjectionOutput, dependencyInjectionText);
    }
}